{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAASC,SAASC,cAAc,mBAChCC,EAAOF,SAASC,cAAc,SAE9BE,EAAeH,SAASC,cAAc,kBACtCG,EAAcJ,SAASC,cAAc,iBACrCI,EAASL,SAASC,cAAc,mBA6CtC,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,MAEpBA,MApDPN,EAAKa,iBAAiB,UAEtB,SAA8BC,GAC5BA,EAAEC,iBACFlB,EAAOmB,UAAW,EAElB,IAAIC,GAAShB,EAAaiB,cAC1B,MAAMC,GAAgBjB,EAAYgB,cAC5BE,GAAajB,EAAOe,cAE1BR,YAAW,KACTb,EAAOmB,UAAW,IACjBI,EAAYD,EAAeF,GAC9B,IAAK,IAAII,EAAI,EAAGA,GAAKD,EAAWC,IAC9BjB,EAAciB,EAAGJ,GACdK,MAAK,EAACjB,SAAEA,EAAQC,MAAEA,MACjBiB,EAAA5B,GAAS6B,OAAOC,QAAQ,uBAAqBJ,QAAUf,UAExDoB,OAAM,EAACrB,SAAEA,EAAQC,MAAEA,MAClBiB,EAAA5B,GAAS6B,OAAOG,QAAQ,sBAAoBN,QAAUf,UAE1DW,GAASE","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\nconst btnRef = document.querySelector('[type=\"submit\"]');\nconst form = document.querySelector('.form');\n\nconst firstDelayMs = document.querySelector('[name=\"delay\"]');\nconst delayStepMs = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\n\nform.addEventListener('submit', submitCreatePromises);\n\nfunction submitCreatePromises(e) {\n  e.preventDefault();\n  btnRef.disabled = true;\n\n  let delay = +firstDelayMs.valueAsNumber;\n  const delayStepVal = +delayStepMs.valueAsNumber;\n  const amountVal = +amount.valueAsNumber;\n\n  setTimeout(() => {\n    btnRef.disabled = false;\n  }, amountVal * delayStepVal + delay)\n  for (let i = 1; i <= amountVal; i++) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${i} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${i} in ${delay}ms`);\n      });\n    delay += delayStepVal;\n  }\n}\n\n// const promise = new Promise((resole, reject) => {\n//   const canFulfill = Math.randomm() > 0.5;\n//   setTimeout(() =>{\n//     if (canFulfill) {\n//       resole('промис выполн успешно(fulfilled)')\n//     }\n//     reject('error');\n//   }, 2000)\n// });\n\n// promise.then(onFulfilled, onRejected);\n// console.\n// promise.then(result => {\n//   console.log(result)\n// },\n// error => {\n//   console.log(error)\n// })\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$btnRef","document","querySelector","$47d4ff9957288465$var$form","$47d4ff9957288465$var$firstDelayMs","$47d4ff9957288465$var$delayStepMs","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","disabled","delay1","valueAsNumber","delayStepVal","amountVal","i","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.41e23f62.js.map"}